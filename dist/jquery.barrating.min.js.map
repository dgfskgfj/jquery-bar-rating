{"version":3,"sources":["jquery.barrating.js"],"names":["factory","define","amd","module","exports","require","jQuery","$","BarRating","self","this","wrapElement","classes","options","theme","push","$elem","wrap","class","join","unwrapElement","unwrap","findOption","value","isNumeric","Math","floor","getInitialOption","initialRating","getEmptyOption","$emptyOpt","find","emptyValue","length","allowEmpty","prependTo","getData","key","data","setData","saveDataOnElement","$opt","val","text","emptyText","userOptions","ratingValue","ratingText","originalRatingValue","originalRatingText","emptyRatingValue","emptyRatingText","readOnly","readonly","ratingMade","removeDataOnElement","removeData","buildWidget","$w","each","html","$a","href","data-rating-value","data-rating-text","append","showSelectedRating","reverse","addClass","nextAllorPreviousAll","setSelectFieldValue","prop","triggerChange","change","resetSelectField","defaultSelected","parent","fraction","round","resetStyle","$widget","removeClass","index","match","applyStyle","$all","$fractional","baseValue","f","isDeselectable","$element","deselectable","attr","attachClickHandler","$elements","on","event","preventDefault","onSelect","call","attachMouseEnterHandler","attachMouseLeaveHandler","fastClicks","cancelable","stopPropagation","click","disableClicks","attachHandlers","hoverState","detachHandlers","off","setupHandlers","show","insertAfter","hide","state","toggleClass","set","silent","clear","onClear","destroy","remove","onDestroy","prototype","init","elem","extend","fn","barrating","defaults","method","plugin","is","error","hasOwnProperty","next","showValues"],"mappings":"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","file":"jquery.barrating.min.js","sourcesContent":["/**\r\n * jQuery Bar Rating Plugin v1.2.2\r\n *\r\n * http://github.com/antennaio/jquery-bar-rating\r\n *\r\n * Copyright (c) 2012-2016 Kazik Pietruszewski\r\n *\r\n * This plugin is available under the MIT license.\r\n * http://www.opensource.org/licenses/mit-license.php\r\n */\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD\r\n        define(['jquery'], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        // Node/CommonJS\r\n        module.exports = factory(require('jquery'));\r\n    } else {\r\n        // browser globals\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n\r\n    var BarRating = (function() {\r\n\r\n        function BarRating() {\r\n            var self = this;\r\n\r\n            // wrap element in a wrapper div\r\n            var wrapElement = function() {\r\n                var classes = ['br-wrapper'];\r\n\r\n                if (self.options.theme !== '') {\r\n                    classes.push('br-theme-' + self.options.theme);\r\n                }\r\n\r\n                self.$elem.wrap($('<div />', {\r\n                    'class': classes.join(' ')\r\n                }));\r\n            };\r\n\r\n            // unwrap element\r\n            var unwrapElement = function() {\r\n                self.$elem.unwrap();\r\n            };\r\n\r\n            // find option by value\r\n            var findOption = function(value) {\r\n                if ($.isNumeric(value)) {\r\n                    value = Math.floor(value);\r\n                }\r\n\r\n                return $('option[value=\"' + value  + '\"]', self.$elem);\r\n            };\r\n\r\n            // get initial option\r\n            var getInitialOption = function() {\r\n                var initialRating = self.options.initialRating;\r\n\r\n                if (!initialRating) {\r\n                    return $('option:selected', self.$elem);\r\n                }\r\n\r\n                return findOption(initialRating);\r\n            };\r\n\r\n            // get empty option\r\n            var getEmptyOption = function() {\r\n                var $emptyOpt = self.$elem.find('option[value=\"' + self.options.emptyValue + '\"]');\r\n\r\n                if (!$emptyOpt.length && self.options.allowEmpty) {\r\n                    $emptyOpt = $('<option />', { 'value': self.options.emptyValue });\r\n\r\n                    return $emptyOpt.prependTo(self.$elem);\r\n                }\r\n\r\n                return $emptyOpt;\r\n            };\r\n\r\n            // get data\r\n            var getData = function(key) {\r\n                var data = self.$elem.data('barrating');\r\n\r\n                if (typeof key !== 'undefined') {\r\n                    return data[key];\r\n                }\r\n\r\n                return data;\r\n            };\r\n\r\n            // set data\r\n            var setData = function(key, value) {\r\n                if (value !== null && typeof value === 'object') {\r\n                    self.$elem.data('barrating', value);\r\n                } else {\r\n                    self.$elem.data('barrating')[key] = value;\r\n                }\r\n            };\r\n\r\n            // save data on element\r\n            var saveDataOnElement = function() {\r\n                var $opt = getInitialOption();\r\n                var $emptyOpt = getEmptyOption();\r\n\r\n                var value = $opt.val();\r\n                var text = $opt.data('html') ? $opt.data('html') : $opt.text();\r\n\r\n                // if the allowEmpty option is not set let's check if empty option exists in the select field\r\n                var allowEmpty = (self.options.allowEmpty !== null) ?\r\n                    self.options.allowEmpty :\r\n                    !!$emptyOpt.length;\r\n\r\n                var emptyValue = ($emptyOpt.length) ? $emptyOpt.val() : null;\r\n                var emptyText = ($emptyOpt.length) ? $emptyOpt.text() : null;\r\n\r\n                setData(null, {\r\n                    userOptions: self.options,\r\n\r\n                    // initial rating based on the OPTION value\r\n                    ratingValue: value,\r\n                    ratingText: text,\r\n\r\n                    // rating will be restored by calling clear method\r\n                    originalRatingValue: value,\r\n                    originalRatingText: text,\r\n\r\n                    // allow empty ratings?\r\n                    allowEmpty: allowEmpty,\r\n\r\n                    // rating value and text of the empty OPTION\r\n                    emptyRatingValue: emptyValue,\r\n                    emptyRatingText: emptyText,\r\n\r\n                    // read-only state\r\n                    readOnly: self.options.readonly,\r\n\r\n                    // did the user already select a rating?\r\n                    ratingMade: false\r\n                });\r\n            };\r\n\r\n            // remove data on element\r\n            var removeDataOnElement = function() {\r\n                self.$elem.removeData('barrating');\r\n            };\r\n\r\n            // return current rating text\r\n            var ratingText = function() {\r\n                return getData('ratingText');\r\n            };\r\n\r\n            // return current rating value\r\n            var ratingValue = function() {\r\n                return getData('ratingValue');\r\n            };\r\n\r\n            // build widget and return jQuery element\r\n            var buildWidget = function() {\r\n                var $w = $('<div />', { 'class': 'br-widget' });\r\n\r\n                // create A elements that will replace OPTIONs\r\n                self.$elem.find('option').each(function() {\r\n                    var val, text, html, $a;\r\n\r\n                    val = $(this).val();\r\n\r\n                    // create ratings - but only if val is not defined as empty\r\n                    if (val !== getData('emptyRatingValue')) {\r\n                        text = $(this).text();\r\n                        html = $(this).data('html');\r\n                        if (html) { text = html; }\r\n\r\n                        $a = $('<a />', {\r\n                            'href': '#',\r\n                            'data-rating-value': val,\r\n                            'data-rating-text': text,\r\n                            'html': (self.options.showValues) ? text : ''\r\n                        });\r\n\r\n                        $w.append($a);\r\n                    }\r\n\r\n                });\r\n\r\n                // append .br-current-rating div to the widget\r\n                if (self.options.showSelectedRating) {\r\n                    $w.append($('<div />', { 'text': '', 'class': 'br-current-rating' }));\r\n                }\r\n\r\n                // additional classes for the widget\r\n                if (self.options.reverse) {\r\n                    $w.addClass('br-reverse');\r\n                }\r\n\r\n                if (self.options.readonly) {\r\n                    $w.addClass('br-readonly');\r\n                }\r\n\r\n                return $w;\r\n            };\r\n\r\n            // return a jQuery function name depending on the 'reverse' setting\r\n            var nextAllorPreviousAll = function() {\r\n                if (getData('userOptions').reverse) {\r\n                    return 'nextAll';\r\n                } else {\r\n                    return 'prevAll';\r\n                }\r\n            };\r\n\r\n            // set the value of the select field\r\n            var setSelectFieldValue = function(value) {\r\n                // change selected option\r\n                findOption(value).prop('selected', true);\r\n\r\n                if (getData('userOptions').triggerChange) {\r\n                    self.$elem.change();\r\n                }\r\n            };\r\n\r\n            // reset select field\r\n            var resetSelectField = function() {\r\n                $('option', self.$elem).prop('selected', function() {\r\n                    return this.defaultSelected;\r\n                });\r\n\r\n                if (getData('userOptions').triggerChange) {\r\n                    self.$elem.change();\r\n                }\r\n            };\r\n\r\n            // display the currently selected rating\r\n            var showSelectedRating = function(text) {\r\n                // text undefined?\r\n                text = text ? text : ratingText();\r\n\r\n                // special case when the selected rating is defined as empty\r\n                if (text == getData('emptyRatingText')) {\r\n                    text = '';\r\n                }\r\n\r\n                // update .br-current-rating div\r\n                if (self.options.showSelectedRating) {\r\n                    self.$elem.parent().find('.br-current-rating').text(text);\r\n                }\r\n            };\r\n\r\n            // return rounded fraction of a value (14.4 -> 40, 0.99 -> 90)\r\n            var fraction = function(value) {\r\n                return Math.round(((Math.floor(value * 10) / 10) % 1) * 100);\r\n            };\r\n\r\n            // remove all classes from elements\r\n            var resetStyle = function() {\r\n                // remove all classes starting with br-*\r\n                self.$widget.find('a').removeClass(function(index, classes) {\r\n                    return (classes.match(/(^|\\s)br-\\S+/g) || []).join(' ');\r\n                });\r\n            };\r\n\r\n            // apply style by setting classes on elements\r\n            var applyStyle = function() {\r\n                var $a = self.$widget.find('a[data-rating-value=\"' + ratingValue() + '\"]');\r\n                var initialRating = getData('userOptions').initialRating;\r\n                var baseValue = $.isNumeric(ratingValue()) ? ratingValue() : 0;\r\n                var f = fraction(initialRating);\r\n                var $all, $fractional;\r\n\r\n                resetStyle();\r\n\r\n                // add classes\r\n                $a.addClass('br-selected br-current')[nextAllorPreviousAll()]()\r\n                    .addClass('br-selected');\r\n\r\n                if (!getData('ratingMade') && $.isNumeric(initialRating)) {\r\n                    if ((initialRating <= baseValue) || !f) {\r\n                        return;\r\n                    }\r\n\r\n                    $all = self.$widget.find('a');\r\n\r\n                    $fractional = ($a.length) ?\r\n                        $a[(getData('userOptions').reverse) ? 'prev' : 'next']() :\r\n                        $all[(getData('userOptions').reverse) ? 'last' : 'first']();\r\n\r\n                    $fractional.addClass('br-fractional');\r\n                    $fractional.addClass('br-fractional-' + f);\r\n                }\r\n            };\r\n\r\n            // check if the element is deselectable?\r\n            var isDeselectable = function($element) {\r\n                if (!getData('allowEmpty') || !getData('userOptions').deselectable) {\r\n                    return false;\r\n                }\r\n\r\n                return (ratingValue() == $element.attr('data-rating-value'));\r\n            };\r\n\r\n            // handle click events\r\n            var attachClickHandler = function($elements) {\r\n                $elements.on('click.barrating', function(event) {\r\n                    var $a = $(this),\r\n                        options = getData('userOptions'),\r\n                        value,\r\n                        text;\r\n\r\n                    event.preventDefault();\r\n\r\n                    value = $a.attr('data-rating-value');\r\n                    text = $a.attr('data-rating-text');\r\n\r\n                    // is current and deselectable?\r\n                    if (isDeselectable($a)) {\r\n                        value = getData('emptyRatingValue');\r\n                        text = getData('emptyRatingText');\r\n                    }\r\n\r\n                    // remember selected rating\r\n                    setData('ratingValue', value);\r\n                    setData('ratingText', text);\r\n                    setData('ratingMade', true);\r\n\r\n                    setSelectFieldValue(value);\r\n                    showSelectedRating(text);\r\n\r\n                    applyStyle();\r\n\r\n                    // onSelect callback\r\n                    options.onSelect.call(\r\n                        self,\r\n                        ratingValue(),\r\n                        ratingText(),\r\n                        event\r\n                    );\r\n\r\n                    return false;\r\n                });\r\n            };\r\n\r\n            // handle mouseenter events\r\n            var attachMouseEnterHandler = function($elements) {\r\n                $elements.on('mouseenter.barrating', function() {\r\n                    var $a = $(this);\r\n\r\n                    resetStyle();\r\n\r\n                    $a.addClass('br-active')[nextAllorPreviousAll()]()\r\n                        .addClass('br-active');\r\n\r\n                    showSelectedRating($a.attr('data-rating-text'));\r\n                });\r\n            };\r\n\r\n            // handle mouseleave events\r\n            var attachMouseLeaveHandler = function($elements) {\r\n                self.$widget.on('mouseleave.barrating blur.barrating', function() {\r\n                    showSelectedRating();\r\n                    applyStyle();\r\n                });\r\n            };\r\n\r\n            // somewhat primitive way to remove 300ms click delay on touch devices\r\n            // for a more advanced solution consider setting `fastClicks` option to false\r\n            // and using a library such as fastclick (https://github.com/ftlabs/fastclick)\r\n            var fastClicks = function($elements) {\r\n                $elements.on('touchstart.barrating', function(event) {\r\n                    if (event.cancelable) {\r\n                        event.preventDefault();\r\n                    }\r\n                    event.stopPropagation();\r\n\r\n                    $(this).click();\r\n                });\r\n            };\r\n\r\n            // disable clicks\r\n            var disableClicks = function($elements) {\r\n                $elements.on('click.barrating', function(event) {\r\n                    event.preventDefault();\r\n                });\r\n            };\r\n\r\n            var attachHandlers = function($elements) {\r\n                // attach click event handler\r\n                attachClickHandler($elements);\r\n\r\n                if (self.options.hoverState) {\r\n                    // attach mouseenter event handler\r\n                    attachMouseEnterHandler($elements);\r\n\r\n                    // attach mouseleave event handler\r\n                    attachMouseLeaveHandler($elements);\r\n                }\r\n            };\r\n\r\n            var detachHandlers = function($elements) {\r\n                // remove event handlers in the \".barrating\" namespace\r\n                $elements.off('.barrating');\r\n            };\r\n\r\n            var setupHandlers = function(readonly) {\r\n                var $elements = self.$widget.find('a');\r\n\r\n                if (getData('userOptions').fastClicks) {\r\n                    fastClicks($elements);\r\n                }\r\n\r\n                if (readonly) {\r\n                    detachHandlers($elements);\r\n                    disableClicks($elements);\r\n                } else {\r\n                    attachHandlers($elements);\r\n                }\r\n            };\r\n\r\n            this.show = function() {\r\n                // run only once\r\n                if (getData()) return;\r\n\r\n                // wrap element\r\n                wrapElement();\r\n\r\n                // save data\r\n                saveDataOnElement();\r\n\r\n                // build & append widget to the DOM\r\n                self.$widget = buildWidget();\r\n                self.$widget.insertAfter(self.$elem);\r\n\r\n                applyStyle();\r\n\r\n                showSelectedRating();\r\n\r\n                setupHandlers(self.options.readonly);\r\n\r\n                // hide the select field\r\n                self.$elem.hide();\r\n            };\r\n\r\n            this.readonly = function(state) {\r\n                if (typeof state !== 'boolean' || getData('readOnly') == state) return;\r\n\r\n                setupHandlers(state);\r\n                setData('readOnly', state);\r\n                self.$widget.toggleClass('br-readonly');\r\n            };\r\n\r\n            this.set = function(value) {\r\n                var options = getData('userOptions');\r\n\r\n                if (self.$elem.find('option[value=\"' + value + '\"]').length === 0) return;\r\n\r\n                // set data\r\n                setData('ratingValue', value);\r\n                setData('ratingText', self.$elem.find('option[value=\"' + value + '\"]').text());\r\n                setData('ratingMade', true);\r\n\r\n                setSelectFieldValue(ratingValue());\r\n                showSelectedRating(ratingText());\r\n\r\n                applyStyle();\r\n\r\n                // onSelect callback\r\n                if (!options.silent) {\r\n                    options.onSelect.call(\r\n                        this,\r\n                        ratingValue(),\r\n                        ratingText()\r\n                    );\r\n                }\r\n            };\r\n\r\n            this.clear = function() {\r\n                var options = getData('userOptions');\r\n\r\n                // restore original data\r\n                setData('ratingValue', getData('originalRatingValue'));\r\n                setData('ratingText', getData('originalRatingText'));\r\n                setData('ratingMade', false);\r\n\r\n                resetSelectField();\r\n                showSelectedRating(ratingText());\r\n\r\n                applyStyle();\r\n\r\n                // onClear callback\r\n                options.onClear.call(\r\n                    this,\r\n                    ratingValue(),\r\n                    ratingText()\r\n                );\r\n            };\r\n\r\n            this.destroy = function() {\r\n                var value = ratingValue();\r\n                var text = ratingText();\r\n                var options = getData('userOptions');\r\n\r\n                // detach handlers\r\n                detachHandlers(self.$widget.find('a'));\r\n\r\n                // remove widget\r\n                self.$widget.remove();\r\n\r\n                // remove data\r\n                removeDataOnElement();\r\n\r\n                // unwrap the element\r\n                unwrapElement();\r\n\r\n                // show the element\r\n                self.$elem.show();\r\n\r\n                // onDestroy callback\r\n                options.onDestroy.call(\r\n                    this,\r\n                    value,\r\n                    text\r\n                );\r\n            };\r\n        }\r\n\r\n        BarRating.prototype.init = function (options, elem) {\r\n            this.$elem = $(elem);\r\n            this.options = $.extend({}, $.fn.barrating.defaults, options);\r\n\r\n            return this.options;\r\n        };\r\n\r\n        return BarRating;\r\n    })();\r\n\r\n    $.fn.barrating = function (method, options) {\r\n        return this.each(function () {\r\n            var plugin = new BarRating();\r\n\r\n            // plugin works with select fields\r\n            if (!$(this).is('select')) {\r\n                $.error('Sorry, this plugin only works with select fields.');\r\n            }\r\n\r\n            // method supplied\r\n            if (plugin.hasOwnProperty(method)) {\r\n                plugin.init(options, this);\r\n                if (method === 'show') {\r\n                    return plugin.show(options);\r\n                } else {\r\n                    // plugin exists?\r\n                    if (plugin.$elem.data('barrating')) {\r\n                        plugin.$widget = $(this).next('.br-widget');\r\n                        return plugin[method](options);\r\n                    }\r\n                }\r\n\r\n            // no method supplied or only options supplied\r\n            } else if (typeof method === 'object' || !method) {\r\n                options = method;\r\n                plugin.init(options, this);\r\n                return plugin.show();\r\n\r\n            } else {\r\n                $.error('Method ' + method + ' does not exist on jQuery.barrating');\r\n            }\r\n        });\r\n    };\r\n\r\n    $.fn.barrating.defaults = {\r\n        theme:'',\r\n        initialRating:null, // initial rating\r\n        allowEmpty:null, // allow empty ratings?\r\n        emptyValue:'', // this is the expected value of the empty rating\r\n        showValues:false, // display rating values on the bars?\r\n        showSelectedRating:true, // append a div with a rating to the widget?\r\n        deselectable:true, // allow to deselect ratings?\r\n        reverse:false, // reverse the rating?\r\n        readonly:false, // make the rating ready-only?\r\n        fastClicks:true, // remove 300ms click delay on touch devices?\r\n        hoverState:true, // change state on hover?\r\n        silent:false, // supress callbacks when controlling ratings programatically\r\n        triggerChange:true, // trigger change event when ratings are set or reset\r\n        onSelect:function (value, text, event) {\r\n        }, // callback fired when a rating is selected\r\n        onClear:function (value, text) {\r\n        }, // callback fired when a rating is cleared\r\n        onDestroy:function (value, text) {\r\n        } // callback fired when a widget is destroyed\r\n    };\r\n\r\n    $.fn.barrating.BarRating = BarRating;\r\n\r\n}));\r\n"],"sourceRoot":"/source/"}